from config import TOKEN, DICT_EMPLOYEE
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from datetime import datetime
from work_with_api import create_ship
# from work_with_api import change_status_pos  # TODO –°—Ç–∞—Ç—É—Å—ã –ø–æ–∫–∞ –Ω–µ –º–µ–Ω—è–µ–º


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.callback_query_handler(Text(startswith="start_assembly"))
async def callbacks(call: types.CallbackQuery) -> None:
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üî¥ –ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É" (callback_data="start_assembly*") –∑–∞–º–µ–Ω—è–µ–º –ò–Ω–õ–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –í—ã–≤–æ–¥–∏–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥:
        "üü¢ –ù–∞—á–∞—Ç—å" - callback_data=f"start_ass_{time_create_order}",
        "üî¥ –û—Ç–º–µ–Ω–∞" - callback_data=f"cancel_ass_{time_create_order}",
        –≥–¥–µ time_create_order —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.
        time_create_order –±–µ—Ä—ë–º –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ callback_data –∫–Ω–æ–ø–∫–∏ "üî¥ –ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É", –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–∫–∞ "_".
    –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ callback_data="start_assembly_13:39".
    –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ callback_data="cancel_ass_13:39".
    """
    time_create_order: str = call.data.split('_')[2]
    buttons = [
        types.InlineKeyboardButton(text="üü¢ –ù–∞—á–∞—Ç—å", callback_data=f"start_ass_{time_create_order}"),
        types.InlineKeyboardButton(text="üî¥ –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_ass_{time_create_order}")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                                        message_id=call.message.message_id,
                                        reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="cancel_ass"))
async def callbacks(call: types.CallbackQuery) -> None:
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üî¥ –û—Ç–º–µ–Ω–∞" (callback_data="cancel_ass*") –∑–∞–º–µ–Ω—è–µ–º –ò–Ω–õ–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º(–≤—ã–≤–æ–¥–∏–º) –∫–Ω–æ–ø–∫—É "üî¥ –ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É" - callback_data=f"start_assembly_{time_create_order}, –∫–∞–∫ –∏ –≤
    –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≥–¥–µ time_create_order —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.
    time_create_order –±–µ—Ä—ë–º –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ callback_data –∫–Ω–æ–ø–∫–∏ "üî¥ –û—Ç–º–µ–Ω–∞", –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–∫–∞ "_".
    –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ callback_data="cancel_ass_13:39".
    –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ callback_data="start_assembly_13:39".
    """
    time_create_order: str = call.data.split('_')[2]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üî¥ –ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É",
                                            callback_data=f"start_assembly_{time_create_order}"))
    await call.message.edit_reply_markup(reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="start_ass"))
async def callbacks(call: types.CallbackQuery):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üü¢ –ù–∞—á–∞—Ç—å" (callback_data="start_ass*"):
    –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ abcp –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
    –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–≤–µ–ª–∏—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫, —Ç–æ:
        –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ call.message.edit_date –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
        –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –≤—Ä–µ–º—è –∫ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ò–Ω–õ–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã–≤–æ–¥–∏–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É:
            "üü° –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É (–°: {merch_name})", –≥–¥–µ merch_name - –∏–º—è —Å–±–æ—Ä—â–∏–∫–∞,
            callback_data=stop_assembly_{time_create_order}_{time_trans_ass_order}, –≥–¥–µ
                time_create_order - –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
                time_trans_ass_order - –≤—Ä–µ–º—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üü¢ –ù–∞—á–∞—Ç—å" –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
        time_create_order –±–µ—Ä—ë–º –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ callback_data –∫–Ω–æ–ø–∫–∏ "üü¢ –ù–∞—á–∞—Ç—å", –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞–∫–∞ "_".

        –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ callback_data="start_ass_13:39".
        –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ callback_data="stop_assembly_13:39_13:41:12".
    –ï—Å–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∑–∏—Ü–∏–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ:
        –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ò–Ω–õ–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã–≤–æ–¥–∏–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É:
            "‚ö†Ô∏è–û—à–∏–±–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            callback_data="pass".
    """
    print(call)
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ –Ω–∞ ‚Äú–≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ‚Äù
    order_number = call.message.text.split(' ')[1]
    print(f'–û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑ ‚Ññ{order_number}')
    # result = await change_status_pos(order_number)  # TODO –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    result = True  # TODO –£–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–∞—á–Ω—ë–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞
    print(result)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ data
    time_create_order: str = call.data.split('_')[2]
    time_trans_ass_order = call.message.edit_date.strftime("%H:%M:%S")
    message_text = call.message.text
    merch_name = DICT_EMPLOYEE[call.from_user.id]

    if result:
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = call.message.text + f'      C: {time_trans_ass_order[:5]}'

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f"üü° –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É (–°: {merch_name})",
            callback_data=f"stop_assembly_{time_create_order}_{time_trans_ass_order}_{call.from_user.id}"
        ))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–µ–Ω—è–µ–º.
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f"‚ö†Ô∏è–û—à–∏–±–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            callback_data="pass"
        ))
    await call.message.edit_text(message_text, entities=call.message.entities, reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="stop_assembly"))
async def callbacks(call: types.CallbackQuery) -> None:
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üü° –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É (–°: {merch_name})" (callback_data="stop_assembly*"):
    –ï—Å–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—Ç–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–ª —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É".
    –ó–∞–º–µ–Ω—è–µ–º —ç—Ç—É –∫–Ω–æ–ø–∫—É –Ω–∞ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥:
        "üü¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å" - callback_data=f"stop_assembl_yes_{time}",
        "üî¥ –û—Ç–º–µ–Ω–∞" - callback_data=f"stop_assembl_no_{time}",
    –≥–¥–µ time —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ "_".
    –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –±–µ—Ä—ë–º –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ callback_data –∫–Ω–æ–ø–∫–∏ "üü° –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É (–°: {merch_name})",
    –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–Ω–∞–∫–∞ "_".
    –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ callback_data="stop_assembly_13:39_13:41:12".
    –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ callback_data="stop_assembl_no_13:39_13:41:12".
    """
    split_call = call.data.split('_')
    time = split_call[2] + '_' + split_call[3]
    correct_user = split_call[4]

    if call.from_user.id != int(correct_user):
        await call.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞!", show_alert=True)
        return

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton(text="üü¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"stop_assembl_yes_{time}"),
        types.InlineKeyboardButton(text="üî¥ –û—Ç–º–µ–Ω–∞", callback_data=f"stop_assembl_no_{time}")
    ]
    keyboard.add(*buttons)
    await call.message.edit_reply_markup(reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="stop_assembl_no"))
async def callbacks(call: types.CallbackQuery) -> None:
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üî¥ –û—Ç–º–µ–Ω–∞" (callback_data="stop_assembl_no*") –∑–∞–º–µ–Ω—è–µ–º –ò–Ω–õ–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ò–Ω–õ–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã–≤–æ–¥–∏–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É:
        "üü° –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É (–°: {merch_name})", –≥–¥–µ merch_name - –∏–º—è —Å–±–æ—Ä—â–∏–∫–∞,
        callback_data=stop_assembly_{time_create_order}_{time_trans_ass_order}, –≥–¥–µ
        time_create_order - –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        time_trans_ass_order - –≤—Ä–µ–º—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üü¢ –ù–∞—á–∞—Ç—å" –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
    time_create_order –∏ time_trans_ass_order –±–µ—Ä—ë–º –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ callback_data –∫–Ω–æ–ø–∫–∏ "üî¥ –û—Ç–º–µ–Ω–∞",
    –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –∏ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–Ω–∞–∫–∞ "_".

    –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ callback_data="stop_assembl_no_13:39_13:41:12".
    –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ callback_data="stop_assembly_13:39_13:41:12".
    """
    time = call.data.split('_')
    time = time[3] + '_' + time[4]
    merch_name = DICT_EMPLOYEE[call.from_user.id]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(
            text=f"üü° –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É (–°: {merch_name})", callback_data=f"stop_assembly_{time}_{call.from_user.id}"
        )
    )
    await call.message.edit_reply_markup(reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="stop_assembl_yes"))
async def callbacks(call: types.CallbackQuery):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üü¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å" (callback_data="stop_assembl_yes*") –∑–∞–º–µ–Ω—è–µ–º –ò–Ω–õ–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    –∏ –≤—ã–≤–æ–¥–∏–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É:
        "–°–æ–±—Ä–∞–Ω –∑–∞ {time_assem} –º–∏–Ω (–°: {merch_name})", –≥–¥–µ
            merch_name - –∏–º—è —Å–±–æ—Ä—â–∏–∫–∞,
            time_assem - –≤—Ä–µ–º—è –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ —Å–±–æ—Ä–∫—É, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø–æ–ª—É—á–∞–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –≤–∑—è—Ç–∏—è
            –Ω–∞ —Å–±–æ—Ä–∫—É –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ call_data –ø–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –∑–Ω–∞–∫–∞ "_" –∏ –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            –∏–∑ call.message.edit_date –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS,
    callback_data="pass".
    –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å–±–æ—Ä–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–∏
    –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    # –°–æ–∑–¥–∞—ë–º –æ—Ç–≥—Ä—É–∑–∫—É –ø–æ –∑–∞–∫–∞–∑—É
    order_number = call.message.text.split(' ')[1]
    print(f'–û—Ç–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑ ‚Ññ{order_number}')
    result = await create_ship(order_number)

    merch_name = DICT_EMPLOYEE[call.from_user.id]

    time_finish_ass_order = call.message.edit_date
    date = call.data.split('_')[4]
    time_assem = round((time_finish_ass_order - datetime.strptime(date, '%H:%M:%S')).seconds / 60, 1)

    message_text = call.message.text
    if result:
        # –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = call.message.text + f'      –í: {time_finish_ass_order.strftime("%H:%M")}'
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f"üü¢ –°–æ–±—Ä–∞–Ω –∑–∞ {time_assem} –º–∏–Ω ({merch_name})",
            callback_data="pass"
        ))
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–µ–Ω—è–µ–º.
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text=f"‚ö†Ô∏è–û—à–∏–±–∫–∞ - —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            callback_data="pass"
        ))
    await call.message.edit_text(message_text, entities=call.message.entities, reply_markup=keyboard)


@dp.callback_query_handler(text="pass")
async def callbacks(call: types.CallbackQuery):
    """
    –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏, —Ç–æ –≤—ã–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.
    """
    await call.answer('–ü–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.', show_alert=True)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp)

